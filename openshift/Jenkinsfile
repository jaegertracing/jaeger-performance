pipeline {
     agent { label 'jaeger-qe-java' }
    options {
        disableConcurrentBuilds()
        /*timeout(time: 8, unit: 'HOURS')*/
    }
    environment {
        DEPLOYMENT_PARAMETERS="-pIMAGE_VERSION=latest -pCOLLECTOR_PODS=${COLLECTOR_PODS}"
        LOGS_COLLECTED="false"
        RUNNING_ON_OPENSHIFT="true"
    }
    parameters {
        string(name: 'JOB_REFERENCE', defaultValue: '', description: 'Jenkins job reference')

        // OpenShift details
        string(name: 'OS_URL', defaultValue: '', description: 'Openshift url')
        string(name: 'OS_USERNAME', defaultValue: '', description: 'Openshift login username')
        password(name: 'OS_PASSWORD', defaultValue: '', description: 'Openshift login password')
        string(name: 'OS_NAMESPACE', defaultValue: 'jaeger-test2', description: 'Openshift namespace')

        string(name: 'TESTS_TO_RUN', defaultValue: 'performance,smoke', description: 'Tests to run: performance,smoke')

        booleanParam(name: 'INSTALL_JAEGER_SERVICES', defaultValue: true, description: 'Install Jaeger services')
        booleanParam(name: 'DELETE_JAEGER_AT_END', defaultValue: true, description: 'Delete the Jaeger instance at end of test')
        booleanParam(name: 'DELETE_JOB_AT_END', defaultValue: true, description: 'Delete test job pods at the end of test')
        booleanParam(name: 'DELETE_REPORTER_AT_END', defaultValue: false, description: 'Delete spans reporter pods at the end of test')

        booleanParam(name: 'TEST_HA_SETUP', defaultValue: false, description: 'Execute HA setup. Kill es, collector pods')

        string(name: 'JAEGERQE_CONTROLLER_URL', defaultValue: 'http://localhost:8080', description: 'JaegerQE controller URL')
        string(name: 'REPORT_ENGINE_URL', defaultValue: 'http://localhost:8080', description: 'Report Engine URL')
        string(name: 'REPORT_ENGINE_LABELS', defaultValue: '{}', description: 'Report Engine custom labels, JSON string, key: value')

        // image details
        string(name: 'PERFORMANCE_TEST_IMAGE', defaultValue: 'jkandasa/jaeger-performance-test:2.2.0', description: 'Jaeger performance test docker image')
        string(name: 'JAEGER_AGENT_IMAGE', defaultValue: 'jaegertracing/jaeger-agent:latest', description: 'Jaeger agent Image')
        string(name: 'JAEGER_COLLECTOR_IMAGE', defaultValue: 'jaegertracing/jaeger-collector:latest', description: 'Jaeger collector image')
        string(name: 'JAEGER_QUERY_IMAGE', defaultValue: 'jaegertracing/jaeger-query:latest', description: 'Jaeger query image')
        string(name: 'STORAGE_IMAGE', defaultValue: 'registry.centos.org/rhsyseng/elasticsearch:5.6.10', description: 'Storage image, can be ElasticSearch or cassandra.')
        booleanParam(name: 'STORAGE_IMAGE_INSECURE', defaultValue: false, description: 'If image location not-secured(HTTP), check this box')

        // reporter node details
        booleanParam(name: 'USE_INTERNAL_REPORTER', defaultValue: true, description: 'If you like to use internal spans reporter, check this box')
        booleanParam(name: 'DEPLOY_REPORTER', defaultValue: false, description: 'If you like to deploy spans reporter, check this box')
        string(name: 'REPORTER_REFERENCE', defaultValue: 'global', description: 'Reporter reference')
        string(name: 'REPORTER_REPLICA_COUNT', defaultValue: '5', description: 'Reporters replica count')
        string(name: 'HOST_COUNT_REPORTER', defaultValue: '1', description: 'Number of nodes should be used to generate spans')
        string(name: 'HOST_COUNT_QUERY', defaultValue: '1', description: 'Number of nodes should be used to run jaeger api queries')
        // mqtt broker details for reporters
        string(name: 'MSG_BROKER_HOST', defaultValue: 'localhost', description: 'Hostname or ip of the message queue broker host')
        string(name: 'MSG_BROKER_PORT', defaultValue: '1883', description: 'Message queue broker port')
        string(name: 'MSG_BROKER_USER', defaultValue: 'guest', description: 'Message queue broker username')
        password(name: 'MSG_BROKER_PASSWORD', defaultValue: 'guest', description: 'Message queue broker password')

        // tracer details
        string(name: 'NUMBER_OF_TRACERS', defaultValue: '100', description: 'Number of tracers')
        string(name: 'NUMBER_OF_SPANS', defaultValue: '4000', description: 'Number of spans per tracer')
        string(name: 'REPORT_SPANS_DURATION', defaultValue: '10m', description: 'How long want to report spans? eg: 50s, 10m, 2h, 2d. s-second, m-minute, h-hour, d-day')
        // query details
        string(name: 'QUERY_LIMIT', defaultValue: '20000', description: 'Maximum items limit on query execution')
        string(name: 'QUERY_SAMPLES', defaultValue: '5', description: 'Number of times the same should be executed')
        string(name: 'QUERY_INTERVAL', defaultValue: '-1', description: 'Query sets will be executed in this interval(seconds). If you want to only once at the end, pass it as -1')
        // agent, collector details
        choice(name: 'SENDER', choices: 'http\nudp', description: 'In which mode spans should be sent. http - collector, udp - agent')
        choice(name: 'REPORTER_TYPE', choices: 'tchannel\ngrpc', description: 'Jaeger collector reporter type to use e.g. tchannel, grpc (default "tchannel")')
        choice(name: 'METRICS_BACKEND', choices: 'expvar\nprometheus\nnone', description: 'Metrics backend for jaeger services')
        
        choice(name: 'STORAGE_TYPE', choices: 'elasticsearch\ncassandra', description: 'Type of backend should be used to store spans')
        choice(name: 'SPANS_COUNT_FROM', choices: 'storage\njaeger-query', description: 'how to check spans count from backend. direct storage access or via jaeger query service?')
        string(name: 'STORAGE_HOST', defaultValue: 'elasticsearch', description: 'Storage hostname, for cassandra: cassandra')
        string(name: 'STORAGE_PORT', defaultValue: '9200', description: 'Storage host port number')
        string(name: 'STORAGE_KEYSPACE', defaultValue: 'jaeger_v1_dc1', description: 'Applicable for cassandra')

        string(name: 'JAEGER_QUERY_HOST', defaultValue: 'jaeger-query', description: 'Jaeger query service hostname')
        string(name: 'JAEGER_QUERY_PORT', defaultValue: '80', description: 'Jaeger query service host port number')
        string(name: 'JAEGER_COLLECTOR_HOST', defaultValue: 'jaeger-collector', description: 'Jaeger collector service hostname')
        string(name: 'JAEGER_COLLECTOR_PORT', defaultValue: '14268', description: 'Jaeger collector service host port number, used in java client, http:14268, tchannel:14267, grpc:14250')
        string(name: 'JAEGER_AGENT_HOST', defaultValue: 'localhost', description: 'Jaeger agent service hostname')
        string(name: 'JAEGER_AGENT_PORT', defaultValue: '6831', description: 'Jaeger agent service host port number')
        string(name: 'JAEGER_AGENT_QUEUE_SIZE', defaultValue: '1000', description: 'Jaeger agent, length of the queue for the UDP server')
        string(name: 'JAEGER_AGENT_WORKERS', defaultValue: '10', description: 'Jaeger agent, how many workers the processor should run')
        
        string(name: 'JAEGER_FLUSH_INTERVAL', defaultValue: '200', description: 'Jaeger java client library flush interval')
        string(name: 'JAEGER_MAX_POCKET_SIZE', defaultValue: '0', description: 'Jaeger java client library max pocket size')
        string(name: 'JAEGER_MAX_QUEUE_SIZE', defaultValue: '10000', description: 'Jaeger java client library max queue size')

        string(name: 'COLLECTOR_PODS', defaultValue: '1', description: 'The number of collector pods')
        string(name: 'COLLECTOR_QUEUE_SIZE', defaultValue: '2000', description: '--collector.queue-size')
        string(name: 'COLLECTOR_NUM_WORKERS', defaultValue: '50', description: '--collector.num-workers')

        string(name: 'QUERY_STATIC_FILES', defaultValue: '', description: '--query.static-files')

        string(name: 'ES_MEMORY', defaultValue: '1Gi', description: 'Memory for each elasticsearch pod')
        string(name: 'ES_BULK_SIZE', defaultValue: '5000000', description: '--es.bulk.size')
        string(name: 'ES_BULK_WORKERS', defaultValue: '1', description: '--es.bulk.workers')
        string(name: 'ES_BULK_FLUSH_INTERVAL', defaultValue: '200ms', description: '--es.bulk.flush-interval')
    }
    stages {
        stage('Update default values') {
            steps {
                script {
                    displayName=params.SENDER + " " + params.COLLECTOR_PODS + " collectors pods"
                }
            }
        }
        stage('Mandatory fields check and login') {
            steps {
                sh '''
                    ./openshift/scripts/oc_login.sh
                '''
            }
        }
        stage('Delete Old Job') {
            steps {
                sh 'oc delete job,template,pod -l group=jaeger-performance-test -n ${OS_NAMESPACE} || true'
            }
        }
        stage('Delete Jaeger') {
            when {
                expression { params.INSTALL_JAEGER_SERVICES }
            }
            steps {
                sh 'oc delete all,template,daemonset,configmap -l jaeger-infra -n ${OS_NAMESPACE} || true'
                sh 'oc delete -f https://raw.githubusercontent.com/RHsyseng/docker-rhel-elasticsearch/5.x/es-cluster-deployment.yml --grace-period=1 -n ${OS_NAMESPACE} || true'
            }
        }
        stage('Cleanup, checkout, build') {
            steps {
                deleteDir()
                checkout scm
                sh 'mkdir -p logs/'
                sh 'ls -alF'
            }
        }
        stage('Deploy jaeger spans reporter') {
            when {
                expression { !params.USE_INTERNAL_REPORTER && params.DEPLOY_REPORTER }
            }
            steps {
                sh '''
                    # update tchannel, grpc port. http:14268, tchannel:14267, grpc:14250
                    if [ ${REPORTER_TYPE} == 'grpc' ]; then
                        export REPORTER_PORT="14250"
                    else
                        export REPORTER_PORT="14267"
                    fi

                    oc delete job,template,pod,deployment -l group=jaeger-spans-reporter-tool -n ${OS_NAMESPACE}
                    curl https://raw.githubusercontent.com/Kiali-QE/jaegerspans-reporter/master/openshift-template.yml --output jaeger_spans_reporter.yml
                    oc process -f jaeger_spans_reporter.yml                                         \
                        -p=JAEGER_AGENT_IMAGE=${JAEGER_AGENT_IMAGE}                                 \
                        -p=JA_METRIC_BACKEND=${METRICS_BACKEND}                                     \
                        -p=JAC_QUEUE_SIZE=${JAEGER_AGENT_QUEUE_SIZE}                                \
                        -p=JAC_WORKERS=${JAEGER_AGENT_WORKERS}                                      \
                        -p=JA_REPORTER_TYPE=${REPORTER_TYPE}                                        \
                        -p=JAEGER_COLLECTOR_HOST_PORT=${JAEGER_COLLECTOR_HOST}:${REPORTER_PORT}     \
                        -p=MQTT_BROKER_HOST=${MSG_BROKER_HOST}                                      \
                        -p=MQTT_BROKER_PORT=${MSG_BROKER_PORT}                                      \
                        -p=MQTT_BROKER_USER=${MSG_BROKER_USER}                                      \
                        -p=MQTT_BROKER_PASSWORD=${MSG_BROKER_PASSWORD}                              \
                        -p=REPLICA_COUNT=${REPORTER_REPLICA_COUNT}                                  \
                        -p=MY_REFERENCE=${REPORTER_REFERENCE} > jaeger_spans_reporter_update.yml
                    oc create --filename jaeger_spans_reporter_update.yml -n ${OS_NAMESPACE}
                    mv jaeger_spans_reporter_update.yml logs/
                    rm jaeger_spans_reporter.yml

                    # sleep 30 seconds to get started reporter nodes
                    sleep 30
                '''
            }
        }
        stage('deploy Cassandra') {
            when {
                expression { params.STORAGE_TYPE == 'cassandra' && params.INSTALL_JAEGER_SERVICES }
            }
            steps {
                sh '''
                    curl https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/production/cassandra.yml --output cassandra.yml
                    oc create --filename cassandra.yml -n ${OS_NAMESPACE}
                '''
            }
        }
        stage('deploy ElasticSearch') {
            when {
                expression { params.STORAGE_TYPE == 'elasticsearch' && params.INSTALL_JAEGER_SERVICES }
            }
            steps {
                sh ' ./openshift/scripts/execute-es-cluster-deployment.sh ${OS_NAMESPACE}'
            }
        }
        stage('deploy Jaeger with Cassandra') {
            when {
                expression { params.STORAGE_TYPE == 'cassandra' && params.INSTALL_JAEGER_SERVICES }
            }
            steps {
                sh '''
                    curl https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/production/configmap-cassandra.yml --output configmap-cassandra.yml
                    oc create -f ./configmap-cassandra.yml
                    curl https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/production/jaeger-production-template.yml --output jaeger-production-template.yml
                    sed -i 's/jaegertracing\\/jaeger-collector:${IMAGE_VERSION}/'${JAEGER_COLLECTOR_IMAGE}'/g' jaeger-production-template.yml
                    sed -i 's/jaegertracing\\/jaeger-query:${IMAGE_VERSION}/'${JAEGER_QUERY_IMAGE}'/g' jaeger-production-template.yml
                    grep "image:" jaeger-production-template.yml
                    ./openshift/scripts/updateTemplateForCassandra.sh ${OS_NAMESPACE}
                    oc process  ${DEPLOYMENT_PARAMETERS} -f jaeger-production-template.yml  | oc create -n ${PROJECT_NAME} -f -
                '''
            }
        }
        stage('deploy Jaeger with ElasticSearch') {
            when {
                expression { params.STORAGE_TYPE == 'elasticsearch' && params.INSTALL_JAEGER_SERVICES }
            }
            steps {
                sh './openshift/scripts/deploy_jaeger_elasticsearch.sh ${OS_NAMESPACE}'
            }
        }
        stage('Wait for Jaeger Deployment') {
            when {
                expression { params.INSTALL_JAEGER_SERVICES }
            }
            steps {
                sh  '''
                    # NAMESPACE SERVICE_NAME MAX_WAIT_TIME
                    ./openshift/scripts/wait_for_service.sh ${OS_NAMESPACE} jaeger-query 60
                    ./openshift/scripts/wait_for_service.sh ${OS_NAMESPACE} jaeger-collector 60
                '''
            }
        }
        stage('Run performance tests') {
            steps{
                sh '''
                    # logs will be stored in this location
                    export LOGS_DIRECTORY=$PWD/logs
                    sleep 60  # wait sometime, to get other setup ready
                    ./openshift/scripts/run_performance_test.sh
                    sleep 30  # wait for 30 seconds to create container

                    # maximum wait duration, 1 hour
                    _TEST_DURATION=3600

                    # wait_for_pods_status.sh NAMESPACE POD_FILTER WAIT_FOR_STATUS MAX_WAIT_TIME

                    if ${TEST_HA_SETUP};then
                        ./openshift/scripts/wait_for_pods_status_with_ha.sh ${OS_NAMESPACE} "app=jaeger-performance-test-job" "Running" ${_TEST_DURATION}
                    else
                        ./openshift/scripts/wait_for_pods_status.sh ${OS_NAMESPACE} "app=jaeger-performance-test-job" "Running" ${_TEST_DURATION}
                    fi

                    # copy log files
                    ./openshift/scripts/copy-log-file.sh  ${OS_NAMESPACE} "app=jaeger-performance-test-job" "jaeger-performance-test"
                    ./openshift/scripts/copy-log-file.sh  ${OS_NAMESPACE} "app=jaeger-performance-test-job" "jaeger-agent"
                    ls -lh logs/

                    # collect all the logs
                    ./openshift/scripts/collect_logs.sh ${OS_NAMESPACE}
                    export LOGS_COLLECTED="true"

                    mvn clean test
                '''
            }
        }
        stage('Collect logs'){
            steps{
                sh '''
                  # ./openshift/scripts/collect_logs.sh ${OS_NAMESPACE}
                  # export LOGS_COLLECTED="true"
                  '''
            }
        }
        stage('Delete Jaeger deployment') {
            when {
                expression { params.DELETE_JAEGER_AT_END && params.INSTALL_JAEGER_SERVICES }
            }
            steps {
                script {
                    sh 'oc delete -f https://raw.githubusercontent.com/RHsyseng/docker-rhel-elasticsearch/5.x/es-cluster-deployment.yml --grace-period=1 -n ${OS_NAMESPACE} || true'
                    sh 'oc delete all,template,daemonset,configmap -l jaeger-infra -n ${OS_NAMESPACE} || true'
                }
            }
        }
        stage('Delete job') {
            when {
                expression { params.DELETE_JOB_AT_END  }
            }
            steps {
                sh 'oc delete job,template,pod -l group=jaeger-performance-test -n ${OS_NAMESPACE}'
            }
        }
        stage('Delete jaeger spans reporter') {
            when {
                expression { params.DELETE_REPORTER_AT_END  }
            }
            steps {
                sh 'oc delete job,template,pod,deployment -l group=jaeger-spans-reporter-tool -n ${OS_NAMESPACE}'
            }
        }
    }

    post {
        always {
            script {
                if (env.LOGS_COLLECTED == 'false') {
                  sh './openshift/scripts/collect_logs.sh ${OS_NAMESPACE}'
                }
            }
            archiveArtifacts artifacts: 'logs/*.*'
        }
    }
}